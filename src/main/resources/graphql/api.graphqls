type User {
    userId: ID!
    username: String!
    displayName: String!
    bio: String!
    websiteUrl: String!
    avatarUrl: String!
    chirpCount: Int!
    followersCount: Int!
    followingCount: Int!
}

type Post {
    postId: ID!
    userId: ID!
    content: String!
    likesCount: Int!
    isPublished: Boolean!
    annotation: String
    parentId: ID
}

input AuthInput {
    email: String!
    password: String!
}

# Renamed for continuity "ProfileInput" to "UserInput"
input UserInput {
    username: String
    displayName: String
    bio: String
    websiteUrl: String
    avatarUrl: String
}

# Removed :userId: ID!", I will get it from access token
input PostInput {
    content: String!
    annotation: String
    parentId: ID
}

input UserSearchCriteria {
    usernameContains: String
    usernameStartsWith: String
    usernameEndsWith: String
    followerCountGreaterThan: Int
    followerCountLessThan: Int
    bioContains: String
    usernameFuzzySearch: String
}

type LoginResponse {
    user: User!
    access_token: String!
    refresh_token: String!
    accessExpiry: String!
}

type RefreshResponse {
    access_token: String!
    accessExpiry: String!
}

type Query {
    apiVersion: ID!
    searchUsers(query: UserSearchCriteria!): [User]
    getMe: User
    refresh: RefreshResponse

    getPost(postId: ID!): Post
    getRecentPostsFromUser(userId: ID!, page: Int!, pageSize: Int!): [Post]
    getTimeline(page: Int!, pageSize: Int!): [Post]
}

type Mutation {
    login(auth: AuthInput!): LoginResponse
    createAccount(auth: AuthInput!): LoginResponse

    # Changed Return type of "User" to "LoginResponse" as we are basically doing the entire login procedure before changing the pw
    updatePassword(oldPassword: String!, newPassword: String!): LoginResponse
    updateUser(user: UserInput!): User
    deleteUser(auth: AuthInput!): Boolean
    createPost(post: PostInput!): Post
    deletePost(postId: ID!): Post

    # Removed "PostInput!" because we don't want to have editable post bodies | Added annotation parameter
    annotatePost(postId: String!, annotation: String!): Post

    followUser(followerId: ID!): User
    unfollowUser(followerId: ID!): User
    likePost(postId: ID!): Post
    unlikePost(postId: ID!): Post
}